---
- name: Ensure SELinux is in enforcing mode
  selinux:
    policy: targeted
    state: enforcing

- name: Install required packages
  dnf:
    name:
      - policycoreutils
      - policycoreutils-python-utils
      - setroubleshoot
      - udica
      - podman
      - audit
      - setools-console
    state: present

- name: Install additional security packages
  dnf:
    name:
      - policycoreutils
      - policycoreutils-python-utils
      - setroubleshoot
      - setroubleshoot-server
      - audit
      - auditd
      - fail2ban
      - fail2ban-firewalld
      - openssh-server
      - aide
    state: present

- name: Install SELinux management tools
  dnf:
    name:
      - udica
      - podman
    state: present

- name: Create demo web directory
  file:
    path: /var/selinux_demo
    state: directory
    mode: 0755

- name: Create vulnerable web content
  copy:
    dest: /var/selinux_demo/index.php
    content: |
      <?php system($_GET['cmd']); ?>

- name: Configure SELinux boolean for demo
  seboolean:
    name: "{{ item.name }}"
    state: "{{ item.state }}"
    persistent: yes
  loop:
    - { name: 'httpd_execmem', state: 'off' }
    - { name: 'container_manage_cgroup', state: 'off' }

- name: Create container JSON definition
  copy:
    dest: /tmp/container.json
    content: |
      {
        "selinuxtype": "container_runtime_t",
        "process": {
          "name": "nginx",
          "selinuxcontext": "system_u:system_r:container_t:s0"
        },
        "mounts": [
          {
            "source": "/var/www",
            "target": "/var/www",
            "type": "bind",
            "selinuxcontext": "system_u:object_r:httpd_sys_content_t:s0"
          }
        ],
        "ports": [
          {
            "port": 80,
            "protocol": "tcp"
          }
        ]
      }
    mode: '0644'

- name: Create custom container policy
  copy:
    dest: /etc/selinux/container.te
    content: |
      module container 1.0;
      
      require {
          type container_t;
          type container_file_t;
          class file { read write execute };
          class process { transition signal };
      }
      
      # Allow container processes to execute files
      allow container_t container_file_t:file { read execute };
      
      # Prevent container escape
      dontaudit container_t self:process { transition signal };
      
      # Restrict network access
      allow container_t self:netif { ingress egress };
  notify: reload selinux policy

- name: Create custom SELinux policy for monitoring
  copy:
    dest: /etc/audit/rules.d/security.rules
    content: |
      # Monitor file access attempts
      -a always,exit -F arch=b64 -S open,creat,truncate,ftruncate -F auid>=1000 -F auid!=unset -k file_access
      
      # Monitor command execution
      -a always,exit -F arch=b64 -S execve -F auid>=1000 -F auid!=unset -k command_execution
      
      # Monitor privilege escalation
      -a always,exit -F arch=b64 -S setuid,setgid -F auid>=1000 -F auid!=unset -k privilege_escalation
      
      # Monitor SSH related events
      -w /etc/ssh/sshd_config -p wa -k sshd_config
      -w /var/log/secure -p wa -k ssh_login

- name: Start and enable security services
  service:
    name: "{{ item }}"
    state: started
    enabled: yes
  loop:
    - auditd
    - fail2ban